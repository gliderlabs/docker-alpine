#!/usr/bin/env bash

declare BUILD_IMAGE="${BUILD_IMAGE:-alpine-builder}"
declare BUILD_PREFIX="${BUILD_PREFIX:-alpine-build-}"
declare PREFIXES="${PREFIXES:-giderlabs/alpine}"
declare MIRROR="${MIRROR:-http://dl-4.alpinelinux.org/alpine}"
declare VERSIONS="${VERSIONS:-versions/*}"

build() {
	declare version_files="${*:-$VERSIONS}"
	: "${version_files:?}"

	if [[ -z $(which docker) ]]; then
		echo "Missing docker client which is required for building"
		exit 2
	fi

	docker build -t "$BUILD_IMAGE" builder

	for file in $version_files; do
		local tags="$(cat "$file")"
		local release="$(basename "$file")"
		local build="${BUILD_PREFIX}${release}"
		local master="$(echo "$PREFIXES" | cut -d' ' -f1):master"

		: "${build:?}" "${tags:?}" "${release:?}"

		docker run --name "$build" "$BUILD_IMAGE" \
			-s \
			-r "$release" \
			-m "$MIRROR"
		docker cp "$build":/rootfs.tar.xz .
		docker build -t "$master" .

		for tag in $tags; do
			for prefix in $PREFIXES; do
				docker tag -f "$master" "${prefix}:${tag}"
				if [[ "$CIRCLE_BUILD_NUM" ]]; then
					mkdir -p images
					docker save "${prefix}:${tag}" \
						| gzip -c > "images/${prefix//\//_}_${tag}_build-${CIRCLE_BUILD_NUM}.tar.gz"
				fi
			done
		done

		docker rm "$build" || true
		docker rmi "$master" || true
		rm -f rootfs.tar.xz
	done
}

test() {
	declare version_files="${*:-$VERSIONS}"
	local repo="$(echo "$PREFIXES" | cut -d' ' -f1)"
	for file in $version_files; do
		local tag="$(head -1 "$file")"
		if docker inspect "${repo}:${tag}" >/dev/null 2>&1; then
			docker run "${repo}:${tag}" apk add --update openssl || exit 1
		fi
	done
}

main() {
	set -eo pipefail; [[ "$TRACE" ]] && set -x
	cmd="$1"
	case "$cmd" in
		test)		shift; test "$@";;
		*)			build "$@";;
	esac
}

main "$@"
