#!/usr/bin/env bash

build() {
	declare build_files="${*:-versions/**/options}"

	for file in $build_files; do
		( # shellcheck source=versions/gliderlabs-3.2/options
        unset RELEASE ARCH MIRROR PACKAGES BUILDER_IMAGE BUILD_OPTIONS TAGS
		source "$file"
		local version_dir
		version_dir="$(dirname "$file")"
		: "${TAGS:?}" "${BUILD_OPTIONS:?}" "${RELEASE:?}" "${ARCH:-x86}"
        ARCH=${ARCH:-x86}
        [[ "$BUILDER_IMAGE" ]] || BUILDER_IMAGE="alpine-builder-${ARCH}"
        [[ "$(docker images $BUILDER_IMAGE -q) 2> /dev/null)" == "" ]] || {
            BUILDER_IMAGE="alpine-builder-${ARCH}"
            docker build -t "$BUILDER_IMAGE" builder -f "builder/Dockerfile-${ARCH}"
        }
		docker run -e "TRACE=$TRACE" --rm "$BUILDER_IMAGE" "${BUILD_OPTIONS[@]}" \
			> "$version_dir/rootfs.tar.xz"

		for tag in "${TAGS[@]}"; do
			docker build -t "$tag" "$version_dir"
			if [[ "$CIRCLE_BUILD_NUM" ]]; then
				{
					mkdir -p images \
					&& docker tag -f "$tag" "${tag}-${CIRCLE_BUILD_NUM}" \
					&& docker save "${tag}-${CIRCLE_BUILD_NUM}" \
						| xz -9e > "images/${tag//\//_}-${CIRCLE_BUILD_NUM}.tar.xz" \
					&& docker rmi "${tag}-${CIRCLE_BUILD_NUM}"
				} || true
			fi
		done )
	done
}

commit() {
	[[ "$CIRCLE_BRANCH" == "release" ]] || return 0

	declare rootfs_files="versions/**/rootfs.tar.xz"
	local build_num="${CIRCLE_BUILD_NUM:-nobuild}"
	local current_branch
	current_branch=$(git rev-parse --abbrev-ref HEAD)
	: "${current_branch:?}"

	for file in $rootfs_files; do
		local release version_dir
		release="$(basename "$(dirname "$file")")"
		version_dir="$(dirname "$file")"
		: "${release:?}" "${version_dir:?}"
		git checkout -B "rootfs/$release" "$current_branch"
		git add -f -- "$file"
		git commit -m "release image version $release for build $build_num"
	done
	[[ "$NO_PUSH" ]] || git push -f origin 'refs/heads/rootfs/*'
	git checkout "$current_branch"
}

run_tests() {
	declare build_files="${*:-versions/**/options}"
	declare -a test_files
	for file in $build_files; do
		# shellcheck source=versions/gliderlabs-3.2/options
		source "$file"
		local tag
		tag="${TAGS[0]}" tag="${tag//:/-}" tag="${tag//\//_}"
		test_files+=("test/test_${tag}.bats")
	done
	bats "${test_files[@]}"
}

push() {
	[[ "$CIRCLE_BRANCH" == "release" ]] || return 0
	[[ "$NO_PUSH" ]] && return 0

	declare build_files="${*:-versions/**/options}"
	for file in $build_files; do
		( #shellcheck source=versions/gliderlabs-3.2/options
		source "$file"
		for tag in "${TAGS[@]}"; do
			if docker history "$tag" &> /dev/null; then
				[[ "$PUSH_IMAGE" ]] && docker push "$tag"
			fi
		done
		exit 0 )
	done
}

library() {
	for file in versions/library-*/options; do
		# shellcheck source=versions/library-3.2/options
		source "$file"
		local refs
		refs="$(git ls-remote --exit-code --heads origin rootfs/library-${RELEASE#v})"
		: "${refs:?}"
		for tag in "${TAGS[@]}"; do
			echo "${tag#*:}:" \
				"git://github.com/gliderlabs/docker-alpine@${refs:0:40}" \
				"versions/library-${RELEASE#v}"
		done
	done
}

main() {
	set -eo pipefail; [[ "$TRACE" ]] && set -x
	declare cmd="$1"
	case "$cmd" in
		test)	shift;	run_tests "$@";;
		commit)	shift;	commit "$@";;
		push)	shift;	push "$@";;
		library) shift; library;;
		*)		build "$@";;
	esac
}

main "$@"
